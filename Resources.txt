Hash Table
-http://www.cse.yorku.ca/~oz/hash.html
A hash table is a data structure that allows efficient storage and retrieval of key-value pairs. It uses a hash function to compute a hash code for each key, which determines the index where the corresponding value will be stored.

Here's how to create and use a hash table:

Define the hash table structure: Start by defining a structure that represents the hash table. This structure typically includes an array to store the buckets, along with other relevant information like the size of the hash table and the number of stored elements.

Choose a hash function: Select or design a hash function that takes a key as input and produces a hash code. The hash function should distribute the keys uniformly across the array of buckets to minimize collisions.

Initialize the hash table: Create an instance of the hash table structure and initialize its properties. Allocate memory for the array of buckets and set the initial values for the size and count of stored elements.

Insertion:

Calculate the hash code for the key using the chosen hash function.
Map the hash code to an index within the array by taking the hash code modulo the size of the array.
If the bucket at the calculated index is empty, store the key-value pair there.
If the bucket is not empty (a collision occurs), handle it according to the chosen collision resolution strategy. For example, in chaining, you can add the new key-value pair to the linked list associated with the bucket.
Update the count of stored elements.
Retrieval:

Calculate the hash code for the key using the same hash function used for insertion.
Map the hash code to an index within the array.
If the bucket at the calculated index is empty, the key is not found.
If the bucket is not empty, search for the key within the bucket. In chaining, you would traverse the linked list until you find the key or reach the end.
If the key is found, retrieve the associated value.
Deletion:

Calculate the hash code for the key.
Map the hash code to an index within the array.
If the bucket at the calculated index is empty, the key is not present in the hash table.
If the bucket is not empty, search for the key within the bucket and delete it. Adjust the pointers or links if using chaining.
Update the count of stored elements.
Resize the hash table (optional): As the number of stored elements increases, you may need to resize the hash table to maintain efficiency. This typically involves creating a new array with a larger size, rehashing all existing key-value pairs into the new array, and deallocating the old array.

It's important to consider factors such as the load factor (ratio of stored elements to the size of the hash table) and the chosen collision resolution strategy (e.g., chaining or open addressing) when implementing a hash table.

I hope this overview helps you understand the process of creating and using a hash table. Remember that there are various implementation details and optimizations that can be applied based on your specific requirements and programming language.
hash function example:
def hash_function(key, table_size):
    hash_value = 5381
    for char in key:
        hash_value = ((hash_value << 5) + hash_value) + ord(char)
    return hash_value % table_size
